diff --git a/src/crypto/tls/boring_test.go b/src/crypto/tls/boring_test.go
index 3f88fbb3b8..dbd6e6600c 100644
--- a/src/crypto/tls/boring_test.go
+++ b/src/crypto/tls/boring_test.go
@@ -75,7 +75,9 @@ func isBoringCipherSuite(id uint16) bool {
 		TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
 		TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
 		TLS_RSA_WITH_AES_128_GCM_SHA256,
-		TLS_RSA_WITH_AES_256_GCM_SHA384:
+		TLS_RSA_WITH_AES_256_GCM_SHA384,
+		TLS_AES_128_GCM_SHA256,
+		TLS_AES_256_GCM_SHA384,
 		return true
 	}
 	return false
@@ -351,7 +354,6 @@ func TestBoringCertAlgs(t *testing.T) {
 
 	L1_I := boringCert(t, "L1_I", boringECDSAKey(t, elliptic.P384()), I_R1, boringCertLeaf|boringCertFIPSOK)
 
-
 	// Older versions of OpenSSL allow 1024 bit leaf certs
 	var L2_I *boringCertificate
 	if boringtest.Supports(t, "RSA1024LeafCert") {
@@ -513,7 +515,7 @@ func TestBoringCertAlgs(t *testing.T) {
 const (
 	boringCertCA = iota
 	boringCertLeaf
-	boringCertFIPSOK = 0x80
+	boringCertFIPSOK    = 0x80
 	boringCertNotBoring = 0x100
 )
 
@@ -525,7 +527,6 @@ func NotBoringRSAKey(t *testing.T, size int) *rsa.PrivateKey {
 	return k
 }
 
-
 func boringRSAKey(t *testing.T, size int) *rsa.PrivateKey {
 	k, err := rsa.GenerateKey(rand.Reader, size)
 	if err != nil {
diff --git a/src/crypto/tls/handshake_client_tls13.go b/src/crypto/tls/handshake_client_tls13.go
index 2f59f6888c..a84cede1b0 100644
--- a/src/crypto/tls/handshake_client_tls13.go
+++ b/src/crypto/tls/handshake_client_tls13.go
@@ -41,10 +41,10 @@ type clientHandshakeStateTLS13 struct {
 func (hs *clientHandshakeStateTLS13) handshake() error {
 	c := hs.c
 
-	if needFIPS() {
+	if needFIPS() && !boring.SupportsHKDF() {
 		return errors.New("tls: internal error: TLS 1.3 reached in FIPS mode")
 	}
 
 	// The server must not select TLS 1.3 in a renegotiation. See RFC 8446,
 	// sections 4.1.2 and 4.1.3.
 	if c.handshakes > 0 {
diff --git a/src/crypto/tls/handshake_server_tls13.go b/src/crypto/tls/handshake_server_tls13.go
index 21d798de37..816ca10858 100644
--- a/src/crypto/tls/handshake_server_tls13.go
+++ b/src/crypto/tls/handshake_server_tls13.go
@@ -45,10 +45,6 @@ type serverHandshakeStateTLS13 struct {
 func (hs *serverHandshakeStateTLS13) handshake() error {
 	c := hs.c
 
-	if needFIPS() {
-		return errors.New("tls: internal error: TLS 1.3 reached in FIPS mode")
-	}
-
 	// For an overview of the TLS 1.3 handshake, see RFC 8446, Section 2.
 	if err := hs.processClientHello(); err != nil {
 		return err
